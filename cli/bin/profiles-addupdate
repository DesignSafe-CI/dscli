#!/bin/bash
#
# profiles-addupdate
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It creates or updates users accounts in a given tenant.
# Note: new user registering requires email verification before the account goes live.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey filetoupload)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [INTERNAL_USERNAME]

Create or update a user account. Use of this service requires the
user-account-manager role.

Note: new user registering requires email verification before the account goes live.

 Options:
  -z, --access_token    Access token
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/profiles-common.sh"

main() {
	#echo -n
	#set -x
	if [[ -z "$email" ]]; then
		# email only required on profile creation
		if [[ -z "${args}" ]]; then
			err "Please specify an email address for the account"
		fi
	else
		query="email=$email"
	fi

	if [[ -z "$username" ]]; then
		# username only required on profile creation.
		# otherwise pull it from the username provided as
		# the command argument.
		if [[ -z "${args}" ]]; then
			err "Please specify a username for the account"
		else
			username="${args}"
		fi
	else
		query="${query}&username=$username"
	fi

	if [[ -z "$password" ]]; then
		# password only required on profile creation
		if [[ -z "${args}" ]]; then
			err "Please specify a password for the user"
		fi
	else
		query="${query}&password=$password"
	fi

	if [[ -n "$first_name" ]]; then
		query="${query}&first_name=$first_name"
	fi

	if [[ -n "$last_name" ]]; then
		query="${query}&last_name=$last_name"
	fi

	if [[ -n "$phone" ]]; then
		query="${query}&phone=$phone"
	fi

	if [[ -n "$mobile_phone" ]]; then
		query="${query}&mobile_phone=$mobile_phone"
	fi

	if [[ -n "$full_name" ]]; then
		query="${query}&full_name=$full_name"
	fi

	if [[ -n "$status" ]]; then
		query="${query}&status=$status"
	fi

	cmd="curl -sk -H \"${authheader}\" -X POST -d \"${query}\" '${hosturl}$args?pretty=true'"

	if ((veryverbose)); then
		[ "$piped" -eq 0 ] && log "Calling $cmd"
	fi

	response=`curl -sk -H "${authheader}" -X POST -d "${query}" "${hosturl}$args?pretty=true"`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "${result}"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		if [ -z "$args" ]; then
			internal_username=$(jsonquery "$1" "result.username")
			echo "Successfully added user $username."
		else
			echo "Successfully updated user $args"
		fi
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    --filter) shift; responsefilter=$1;;
    -H|--hosturl) shift; hosturl=$1 ;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
