#!/usr/bin/env python

import requests
import re
import argparse

from operator import itemgetter

base_url = 'https://api.status.io/1.0/status/'
user_agent = 'cyverse-sdk/1.3.1 (python-requests)'
# emoji mappings for statusio states
mappings = {100: u'\U0001f60e',
            300: u'\U0001f625',
            400: u'\U0001f620',
            500: u'\U0001f621',
            600: u'\U0001f637'}

statusio = {'tacc.agave': {'pageid': '53a1e022814a437c5a000781',
                              'select': 'CyVerse|Apps|Files|Jobs|Systems|Metadata|Notifications|Monitors|Stats|Usage|PostIts',
                              'strip': '\s?(CyVerse|Service|Server)\s?',
                              'replace': [],
                              'name': 'CyVerse:ScienceAPI'},
            'cyverse.core': {'pageid': '54b6f6d8683bac79200003dc',
                             'select': 'Data|Auth',
                             'strip': '',
                             'replace': [],
                             'name': 'CyVerse:Core'},
            'cyverse.atmo': {'pageid': '544e810996cc7fe45400896c',
                             'select': '',
                             'strip': '',
                             'replace': [],
                             'name': 'CyVerse:Atmosphere'},
            'cyverse.de': {'pageid': '54b6f25d22de98fe5e00028f',
                           'select': '',
                           'strip': '',
                           'replace': ['Website', 'Web Application'],
                           'name': 'CyVerse:DiscoveryEnvironment'}}

# Set up command line
parser = argparse.ArgumentParser()
parser.add_argument("--services", help="show individual service reports", action="store_true")
parser.add_argument("--maintenance", help="show maintenance notices", action="store_true")
parser.add_argument("--incident", help="show incident reports", action="store_true")
args = parser.parse_args()

PRINTSERVICES = False
PRINTMAINT = False
PRINTINCIDENT = False

if args.services:
    PRINTSERVICES = True
if args.maintenance:
    PRINTMAINT = True
if args.incident:
    PRINTINCIDENT = True

# Holds all per-service responses
services = []
# Active incidents
incidents = []
# Maintenance notices
maintenances = []

print '***Platforms***'
# Iterate over our collection of status.io pages
for e in statusio.keys():
    headers = {'user-agent': user_agent}
    r = requests.get(base_url + statusio[e]['pageid'], headers=headers)
    j = r.json()
    # Set up filters
    reselect = re.compile(statusio[e]['select'])
    restrip = re.compile(statusio[e]['strip'])
    overview = j['result']['status_overall']
    print statusio[e]['name'], ': ', mappings[overview['status_code']], ' ', overview['status'], ' ', overview['updated']

    # Parse individual service status reports
    statuses = j['result']['status']
    for s in statuses:
        sname = s['name']
        if reselect.match(sname):
            sname = re.sub(statusio[e]['strip'], '', sname)
            if statusio[e]['replace']:
                sname = re.sub(statusio[e]['replace'][0],
                               statusio[e]['replace'][1],
                               sname)
            svc = {'name': statusio[e]['name'] + ':' + sname,
                   'status': s['status'],
                   'emoji': mappings[s['status_code']]}
            services.append(svc)

# Incidents

# Maintenance

# Print out merged results for Services
if PRINTSERVICES:
    print '***Services***'
    finale = sorted(services, key=itemgetter('name'))
    for f in finale:
        print f['name'], ':', f['emoji']

"""
{
  "result": {
    "status_overall": {
      "updated": "2016-01-29T22:57:03.079Z",
      "status": "Operational",
      "status_code": 100
    },
  "status": [
    {
      "id": "56a808c7b62d59d808000016",
      "name": "Website",
      "updated": "2016-01-29T22:57:03.079Z",
      "status": "Operational",
      "status_code": 100,
      "containers": [
        {
          "id": "56a808c7b62d59d808000015",
          "name": "US-West",
          "updated": "2016-01-29T22:55:53.004Z",
          "status": "Operational",
          "status_code": 100
        },
        {
          "id": "56a808c7b62d59d808000019",
          "name": "US-East",
          "updated": "2016-01-29T22:55:53.004Z",
          "status": "Operational",
          "status_code": 100
        }
      ]
    }
    ],
    "incidents": [],
    "maintenance": {
      "active": [],
      "upcoming": []
    }
  }
}
"""

"""
100 - Operational

300 - Degraded Performance

400 - Partial Service Disruption

500 - Service Disruption

600 - Security Event
1F694
"""
