#!/bin/bash

SYSNAME=$(hostname --fqdn | awk -F '.' '{ print $2 }')

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Test for agave cli in $PATH
AGAVE_CANARY=$(which auth-check)
if [ -z "${AGAVE_CANARY}" ]; then echo "The Cyverse CLI is not in your PATH. Please ensure that it is and re-run this script."; exit 1; fi

# Test to see if we're on Mac OS X as it has
# a very clunky old version of sed installed
darwin=false;
case "`uname`" in
  Darwin*) darwin=true ;;
esac

if $darwin; then
  sedi="sed -i ''"
else
  sedi="sed -i"
fi

cat << EOF

 _____  _    ____ ____
|_   _|/ \  / ___/ ___|
  | | / _ \| |  | |
  | |/ ___ \ |__| |___
  |_/_/   \_\____\____|

*Cyverse API Enrollment*

This script will register a personal instance of TACC
'${SYSNAME}' that can be used build and validate Agave
apps. The following steps assume you have created
an Agave Oauth2 client using 'client-create'.

The following 'auth-tokens-create' command will
create and store a temporary access token. To refresh
it after it expires, use 'auth-tokens-refresh -S'.

*Create an OAuth2 token*
EOF

auth-tokens-create -q -S

# Pause briefly... race conditions are frustrating
sleep 2

# Verify token via auth-check before proceeding...
auth-check -v | grep "iplantc" > /dev/null
if [ $? -ne 0 ]; then echo "Error with OAuth2 configuration. Exiting."; exit 1; fi

# Collect TACC info
cat << EOF

*Connect Agave to the '${SYSNAME}' HPC system*

The following information will be generated or gathered to
configure this system for access via Agave:

  TACC username
  SSH keys for your account
  TACC Allocation name
  Path to your TACC \$WORK directory

EOF

default="Yes"
read -p "Are you ready to proceed? [$default]: " READY
READY=${READY:-$default}
if [ "$READY" != "Yes" ]; then exit 1; fi

echo -e "\n"

generate_agave_ssh_keys () {

	PRIVATE_KEY_PATH="$HOME/.ssh/agaveapi"
	PUBLIC_KEY_PATH="${PRIVATE_KEY_PATH}.pub"

	ssh-keygen -q -t rsa -N '' -f ${PRIVATE_KEY_PATH}

	if [ -e ${PUBLIC_KEY_PATH} ] && [ -e ${PRIVATE_KEY_PATH} ];
	then
		cat ${PUBLIC_KEY_PATH} >> ~/.ssh/authorized_keys
	else
		echo "Error creating ~/.ssh/agave keypair. Exiting." && exit 1
	fi

}

echo "Checking for existence of SSH keys..."

PRIVATE_KEY_PATH="~/.ssh/id_rsa"
PUBLIC_KEY_PATH="~/.ssh/id_rsa.pub"
if [ ! -e ${PUBLIC_KEY_PATH} ] || [ ! -e ${PRIVATE_KEY_PATH} ];
then
	echo -e "Keys not found. Generating a keypair.\n\n"
	generate_agave_ssh_keys
fi

PUBLIC_KEY=$(jsonpki --public ${PUBLIC_KEY_PATH})
PRIVATE_KEY=$(jsonpki --private ${PRIVATE_KEY_PATH})

default=$USER
read -p "TACC user account [$default]: " USERNAME
USERNAME=${USERNAME:-$default}
if [ -z "$USERNAME" ]; then echo "Error: TACC username can't be empty."; exit 1; fi
echo "Confirmed: $USERNAME"

default="iPlant-Collabs"
read -p "TACC allocation to be used with this system [$default]: " PROJECT
PROJECT=${PROJECT:-$default}
if [ -z "$PROJECT" ]; then echo "Error: TACC project name can't be empty."; exit 1; fi
echo "Confirmed: $PROJECT"

default=$(echo $WORK)
read -p "TACC work directory [$default]: " WORKD
WORKD=${WORKD:-$default}
if [ -z "$WORKD" ]; then echo "Error: TACC work directory can't be left empty."; exit 1; fi
echo "Confirmed: $WORKD"

# Create a date stamp (we don't use anymore in system descriptions)
DATESTAMP=$(date +%m%d%Y-%0k%M)

# Register with Agave API
echo -e "\n*Registering system with Agave API*\n"

TMPDIR="${HOME}/tmp"
mkdir -p "${TMPDIR}"

for F in $DIR/../templates/tacc-${SYSNAME}*
do
  echo "System template ${BN}..."
  tacc-template-write.py ${USERNAME} ${PROJECT} ${WORKD} ${PRIVATE_KEY_PATH} ${F} ${TMPDIR}

  systems-addupdate -q -F "${TMPDIR}/${BN}.json"

done

CYVERSE_USERNAME=$(curl -sk -H "Content-Type: application/json" -X POST --data-binary "$(profiles-list -v me)" "https://agaveapi.co/json-mirror?q=username")
temp="${CYVERSE_USERNAME%\"}"
temp="${temp#\"}"
CYVERSE_USERNAME=$temp

echo -e "\nHere are up to 10 recently registered private systems owned by $CYVERSE_USERNAME:"
systems-search "owner=$CYVERSE_USERNAME" "private=true" "limit=10"
