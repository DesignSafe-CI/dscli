#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Test for agave cli in $PATH
AGAVE_CANARY=$(which auth-check)
if [ -z "${AGAVE_CANARY}" ]; then echo "The Cyverse CLI is not in your PATH. Please ensure that it is and re-run this script."; exit 1; fi

# Test to see if we're on Mac OS X as it has
# a very clunky old version of sed installed
darwin=false;
case "`uname`" in
  Darwin*) darwin=true ;;
esac

if $darwin; then
  sedi="sed -i ''"
else
  sedi="sed -i"
fi

cat << EOF
 _______ __                  
|   _   |  |_.--------.-----.
|       |   _|        |  _  |
|___|___|____|__|__|__|_____|
                             
*Cyverse API Enrollment*

This script will register an Atmosphere Virtual
Machine as an Agave system that can be used build,
validate, and run Agave apps. If you have an existing
Atmosphere Agave system, you can update its IP address
by re-running this script and specifying the new IP.

The following steps assume you have created an Agave 
Oauth2 client using 'client-create -S'.

The following 'auth-tokens-create' command will
create and store a temporary access token. To refresh
it after it expires, use 'auth-tokens-refresh -S'.

*Create an OAuth2 token*
EOF

auth-tokens-create -q -S

# Pause briefly... race conditions are frustrating
sleep 2

# Verify token via auth-check before proceeding...
auth-check -v | grep "iplantc" > /dev/null
if [ $? -ne 0 ]; then echo "Error with OAuth2 configuration. Exiting."; exit 1; fi

# Retrieve Cyverse username
CYVERSE_USERNAME=$(curl -sk -H "Content-Type: application/json" -X POST --data-binary "$(profiles-list -v me)" "http://agaveapi.co/json-mirror?q=username")
temp="${CYVERSE_USERNAME%\"}"
temp="${temp#\"}"
CYVERSE_USERNAME=$temp

# This little trick will TRY to detect if we're on an Atmo VM and default
# to providing that system as the target to be registered
HOSTNAME=$(echo `hostname` | egrep "vm" | egrep "cyverse|iplantc")

# Collect TACC info
cat << EOF

*Connect Agave to Atmosphere*

The following information will be gathered to
configure an Atmosphere VM system for use 
with the Agave API:

  Cyverse username
    Default: ${CYVERSE_USERNAME}
  Cyverse password
    Default: 
  Atmosphere VM hostname/IP
    Default: ${HOSTNAME}
  Preferred path on VM to store data
    Default: /home/${CYVERSE_USERNAME}
  Preferred Agave system name
    Default: cyverse-atmo-${CYVERSE_USERNAME}

EOF

default="Yes"
read -p "Do you have all the information required? [$default]: " READY
READY=${READY:-$default}
if [ "$READY" != "Yes" ]; then exit 1; fi

echo "OK. Let's begin."

default="${CYVERSE_USERNAME}"
read -p "Enter your Cyverse user account [$default]: " USERNAME
USERNAME=${USERNAME:-$default}
if [ -z "$USERNAME" ]; then echo "Error: Cyverse username can't be empty."; exit 1; fi
echo "Confirmed: Cyverse user account is $USERNAME"

default=""
read -s -p "Enter your Cyverse account password [$default]: " PASSWORD
if [ -z "$PASSWORD" ]; then echo "Error: Password can't be empty."; exit 1; fi
PASSWORD=${PASSWORD:-$default}
echo "\n"

default="${HOSTNAME}"
read -p "Enter the hostname or IP address of a running Atmosphere VM [$default]: " HOSTNAME
HOSTNAME=${HOSTNAME:-$default}
if [ -z "$HOSTNAME" ]; then echo "Error: IP address can't be empty."; exit 1; fi
echo "Confirmed: IP address is $HOSTNAME"

default="/home/${USERNAME}"
read -p "Enter the preferred location on the VM to store Agave-managed data [$default]: " WORKD
WORKD=${WORKD:-$default}
echo "Confirmed: Agave data directory is $WORK"

default="cyverse-atmo-${USERNAME}"
read -p "Enter the preferred Agave system name[$default]: " SYSNAME
SYSNAME=${SYSNAME:-$default}
echo "Confirmed: Agave data directory is $WORK"

# Register with Agave API
echo -e "\n*Registering system with Agave API*\n"

TMPDIR="${HOME}/tmp"
mkdir -p "${TMPDIR}"

# Create a date stamp to ensure the system name is fairly unique
DATESTAMP=$(date +%m%d%Y-%k%M)

for F in $DIR/../templates/cyverse-atmo*
do
  echo "Processing template ${BN}..."
  BN=$(basename $F .jsonx)

  sed -e "s|\${USERNAME}|${USERNAME}|g" \
      -e "s|\${PASSWORD}|${PASSWORD}|g" \
      -e "s|\${PROJECT}|${PROJECT}|g"   \
      -e "s|\${DATESTAMP}|${DATESTAMP}|g" \
      -e "s|\${WORKD}|${WORKD}|g" \
      -e "s|\${SYSNAME}|${SYSNAME}|g" \
      -e "s|\${HOSTNAME}|${HOSTNAME}|g" \
      ${F} > "$TMPDIR/$BN.json"

  systems-addupdate -q -F "${TMPDIR}/${BN}.json" \
      && rm -rf "${TMPDIR}/${BN}.json"

done

echo -e "\nHere are up to 10 recently registered private systems owned by $CYVERSE_USERNAME:"
systems-search "owner=$CYVERSE_USERNAME" "private=true" "limit=10"

